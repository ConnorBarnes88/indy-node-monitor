---
{{- with .Values.alertmanager }}
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ $.Values.namespace }}
  name: {{ .name }}
  labels:
    app: {{ .name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .name }}
  template:
    metadata:
      labels:
        app: {{ .name }}
    spec:
      containers:
        - name: {{ .name }}
          image: "{{ .repository }}:{{ .tag }}"
          ports:
            - containerPort: 9093
          command:
            - "alertmanager"
            - "--config.file=/etc/alertmanager/config.yml"
            - "--storage.path=/alertmanager"
          volumeMounts:
            - mountPath: /etc/alertmanager/config.yml
              name: "{{ .name }}-config"
              subPath: config.yml
      volumes:
        - name: "{{ .name }}-config"
          configMap:
            name: "{{ .name }}-configmap"
            items:
              - key: config.yml
                path: config.yml
{{- end }}
---
{{- with .Values.grafana }}
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ $.Values.namespace }}
  name: {{ .name }}
  labels:
    app: {{ .name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .name }}
  template:
    metadata:
      labels:
        app: {{ .name }}
    spec:
      containers:
        - name: {{ .name }}
          image: "{{ .repository }}:{{ .tag }}"
          ports:
            - containerPort: 3000
          env:
            - name: GF_USERS_ALLOW_SIGN_UP
              value: "false"
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: credentials
                  key:  GF_SECURITY_ADMIN_PASSWORD
            - name: INFLUX_DB_FLUX_TOKEN
              valueFrom:
                secretKeyRef:
                  name: credentials
                  key: INFLUX_DB_FLUX_TOKEN
          volumeMounts:
            - name: "{{ .name }}-data"
              mountPath: "/var/lib/grafana"
            - name: "{{ .name }}-datasource"
              mountPath: "/etc/grafana/provisioning/datasources/datasource.yml"
              subPath: datasource.yml
            - name: "{{ .name }}-dashboard"
              mountPath: "/etc/grafana/provisioning/dashboards/dashboard.yml"
              subPath: dashboard.yml
          {{- range $.Values.dashboards }}
            - name: {{ . | replace ".json" "" }}-dashboard
              mountPath: "/etc/grafana/provisioning/dashboards/{{ . }}"
              subPath: "{{ . }}"
          {{- end }}
      volumes:
        - name: "{{ .name }}-data"
          persistentVolumeClaim:
            claimName: "{{ .name }}-pvc"
        - name: "{{ .name }}-datasource"
          configMap:
            name: "{{ .name }}-configmap"
            items:
              - key: datasource.yml
                path: datasource.yml
        - name: "{{ .name }}-dashboard"
          configMap:
            name: "{{ .name }}-configmap"
            items:
              - key: dashboard.yml
                path: dashboard.yml
      {{- range $.Values.dashboards }}
        - name: {{ . | replace ".json" "" }}-dashboard
          configMap:
            name: "{{ $.Values.grafana.name }}-configmap"
            items:
              - key: "{{ . }}"
                path: "{{ . }}"
      {{- end }}
{{- end }}
---
{{- with .Values.influxdb }}
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ $.Values.namespace }}
  name: {{ .name }}
  labels:
    app: {{ .name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .name }}
  template:
    metadata:
      labels:
        app: {{ .name }}
    spec:
      containers:
        - name: {{ .name }}
          image: "{{ .repository }}:{{ .tag }}"
          ports:
            - containerPort: 8082
            - containerPort: 8086
            - containerPort: 8089
          env:
            - name: INFLUX_TOKEN
              valueFrom:
                secretKeyRef:
                  name: credentials
                  key:  INFLUX_TOKEN
          volumeMounts:
            - name: "{{ .name }}-data"
              mountPath: "/var/lib/influxdb"
            - name: "{{ .name }}-config"
              mountPath: "/etc/influxdb/influxdb.conf"
              subPath: influxdb.conf
      volumes:
        - name: "{{ .name }}-data"
          persistentVolumeClaim:
            claimName: "{{ .name }}-pvc"
        - name: "{{ .name }}-config"
          configMap:
            name: "{{ .name }}-configmap"
            items:
              - key: influxdb.conf
                path: influxdb.conf
{{- end }}
---
{{- with .Values.prometheus }}
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ $.Values.namespace }}
  name: {{ .name }}
  labels:
    app: {{ .name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .name }}
  template:
    metadata:
      labels:
        app: {{ .name }}
    spec:
      containers:
        - name: {{ .name }}
          image: "{{ .repository }}:{{ .tag }}"
          ports:
            - containerPort: 9090
          command: 
            - "prometheus"
            - "--config.file=/etc/prometheus/prometheus.yml"
            - "--storage.tsdb.path=/prometheus"
            - "--web.console.libraries=/usr/share/prometheus/console_libraries"
            - "--web.console.templates=/usr/share/prometheus/consoles"
          volumeMounts:
            - name: "{{ .name }}-data"
              mountPath: "/prometheus"
            - name: "{{ .name }}-config"
              mountPath: "/etc/prometheus/prometheus.yml"
              subPath: prometheus.yml
            - name: "{{ .name }}-alert"
              mountPath: "/etc/prometheus/alert.rules"
              subPath: alert.rules
      volumes:
        - name: "{{ .name }}-data"
          persistentVolumeClaim:
            claimName: "{{ .name }}-pvc"
        - name: "{{ .name }}-config"
          configMap:
            name: "{{ .name }}-configmap"
            items:
              - key: prometheus.yml
                path: prometheus.yml
        - name: "{{ .name }}-alert"
          configMap:
            name: "{{ .name }}-configmap"
            items:
              - key: alert.rules
                path: alert.rules
{{- end }}
---
{{- with .Values.telegraf }}
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ $.Values.namespace }}
  name: {{ .name }}
  labels:
    app: {{ .name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .name }}
  template:
    metadata:
      labels:
        app: {{ .name }}
    spec:
      containers:
        - name: {{ .name }}
          image: "{{ .repository }}:{{ .tag }}"
          ports:
            - containerPort: 9273
          env:
            - name: INFLUX_TOKEN
              valueFrom:
                secretKeyRef:
                  name: credentials
                  key:  INFLUX_TOKEN
          {{- range $.Values.inputs }}
            - name: "{{ . | upper }}_SEED"
              valueFrom:
                secretKeyRef:
                  name: seeds
                  key: "{{ . | upper }}_SEED"
          {{- end }}
            - name: HOSTNAME
              value: telegraf
          volumeMounts:
            - name: "{{ .name }}-config"
              mountPath: /etc/telegraf/telegraf.conf
              subPath: telegraf.conf
      volumes:
        - name: "{{ .name }}-config"
          configMap:
            name: "{{ .name }}-configmap"
            items:
              - key: telegraf.conf
                path: telegraf.conf
{{- end }}
---
{{- with .Values.indy_node_monitor }}
apiVersion: apps/v1
kind: Deployment
metadata:
  namespace: {{ $.Values.namespace }}
  name: {{ .name }}
  labels:
    app: {{ .name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{ .name }}
  template:
    metadata:
      labels:
        app: {{ .name }}
    spec:
      containers:
        - name: {{ .name }}
          image: "{{ .repository }}:{{ .tag }}"
          ports:
            - containerPort: 8080
          command:
            - "python"
            - "main.py"
            - "--web"
            - "--verbose"
          volumeMounts:
            - name: "{{ .name }}-config"
              mountPath: /home/indy/networks.json
              subPath: networks.json
      volumes:
        - name: "{{ .name }}-config"
          configMap:
            name: "{{ .name }}-configmap"
            items:
              - key: networks.json
                path: networks.json
{{- end }}
---
